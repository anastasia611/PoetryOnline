<script>
    import { createEventDispatcher } from 'svelte';
    import Word from "./Word.svelte";
    import IconButton from "./IconButton.svelte";
    import { push, remove } from "./common/arrays";

    export let words = [];
    export let wordIndex = -1;

    const title = 'Удалить строку';
    const URL = "http://localhost:8082/getRhymes"

    $: rhymes = [];

    const dispatch = createEventDispatcher();

    let destroyed = false;

    $: {
        //console.log('line word ind', words, wordIndex)
    }

    const updateWord = word => {
        if (word) {
            console.log('add word', words, word, wordIndex)
            words[wordIndex] = word;
        } else {
            console.log('add empty word - remove', words, wordIndex)
            onRemoveWord(wordIndex);
            if (wordIndex > 0) {
                --wordIndex;
            }
        }
    };

    const addWord = word => {
        words = push(words, ++wordIndex, word);
    };

    const onRemoveLine = () => {
        console.log('rm line', words)
        dispatch('remove', { words });
    };

    const onAddLine = () => {
        dispatch('add', { words });
    };

    const onEnter = e => {
        const word = e.detail.word;
        updateWord(word);

        if (wordIndex < words.length - 1) {
            console.log('enter word', words, word, wordIndex)
            ++wordIndex;
        } else {
            console.log('enter word - new line', words, word, wordIndex)
            onAddLine();
        }
    };

    const onSpace = e => {
        updateWord(e.detail.word);
        console.log('space', e.detail.word, wordIndex, words)
        if (!words[wordIndex]) {
            return;
        }
        if (wordIndex < words.length - 1 && !words[wordIndex + 1]) {
            return;
        }
        addWord('');
    };

    const onPunct = e => {
        const word = e.detail.word;
        updateWord(word);
        addWord(e.detail.sign);
        addWord('');
    };

    const onRemoveWord = i => {
        // can be removed via button, may need to update current index with new value
        wordIndex = i;

        if (!words.length) {
            console.log('rm line - empty on rem word', words)
            onRemoveLine();
        } else if (wordIndex === words.length) {
            onBackWord();
        } else {
            console.log('rm word', words, i, words[i])
            remove(words, i);
            console.log('word removed', words)
            words = words;
        }
    };

    const onBackWord = () => {
        console.log('back', wordIndex, wordIndex - 1, words)
        if (wordIndex > 0) {
            --wordIndex;
        } else {
            onBackLine();
        }
    };

    const onNextWord = () => {
        console.log('next', wordIndex, wordIndex + 1, words)
        if (wordIndex < words.length - 1) {
            ++wordIndex;
        } else {
            onNextLine();
        }
    };

    const onNextLine = () => {
        dispatch('next');
    };

    const onBackLine = () => {
        dispatch('back');
    };

    const onUp = () => {
        onBackLine();
    };

    const onDown = () => {
        onNextLine();
    };

    const onFocus = i => {
        // console.log('word', i, words[i]);
        wordIndex = i;
        dispatch('focus', { wordIndex });
    };

    const onBlur = () => {
        if (destroyed) {
            return;
        }

        console.log('blur line', words)
        if (!words || !words.length) {
            console.log('rm line - empty on blur', words)
            onRemoveLine();
        }
        dispatch('blur');
    };

    const onGetRhymes = async () => {
        const word = words[wordIndex];
        /*let response = await fetch(`${URL}?word=${word}`);
        if (response.ok) {
            rhymes = await response.json();
        } else {
            console.log("Ошибка HTTP: " + response.status);
        }*/
    };
</script>

<div class="line">
    <div>
        {#each words as word, i}
            <Word
                    {word}
                    editable={i === wordIndex}
                    on:focus
                    on:blur
                    on:remove
                    on:enter
                    on:punct
                    on:back
                    on:next
                    on:up
                    on:down
                    on:space
                    on:editFinished/>
        {/each}
    </div>

    <div class="right-menu">
        <IconButton icon="cross" size="10" {title} on:click={onRemoveLine}/>
        <IconButton icon="plus" size="11" {title} on:click={onAddLine}/>
        <!--{#if rhymes.length}-->
        <!--    <select name="rhymes">-->
        <!--        {#each rhymes as rhyme}-->
        <!--            <option value={rhyme}>{rhyme}</option>-->
        <!--        {/each}-->
        <!--    </select>-->
        <!--{/if}-->
        <button on:click={onGetRhymes}>Get rhyme</button>
    </div>
</div>

<style lang="scss">
    .line {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0.25rem 0.5rem;

        .right-menu {
            display: flex;
            align-items: center;
            float: right;
            margin-left: 1rem;
            opacity: 0;
        }

        &:hover, &:focus, &:focus-within {
            background-color: #E5E5E5;

            .right-menu {
                opacity: 1;
            }
        }
    }
</style>